<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>de.accso.java.graalvm</groupId>
  <artifactId>mandelbrot</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  
  <properties>
    <java.version>17</java.version>
	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	<graalvm.version>22.0.0.2</graalvm.version>
	<native.maven.plugin.version>0.9.9</native.maven.plugin.version>
	
	<app.inMemory.main.class>MandelbrotInMemory</app.inMemory.main.class>
	<exe.inMemory.file.name>mandelbrotInMemory</exe.inMemory.file.name>

	<app.toPNG.main.class>MandelbrotToPNGFile</app.toPNG.main.class>
	<exe.toPNG.file.name>mandelbrotToPNGFile</exe.toPNG.file.name>
  </properties>

  <dependencies>
	<dependency>
		<groupId>org.graalvm.sdk</groupId>
		<artifactId>graal-sdk</artifactId>
		<version>${graalvm.version}</version>
		<scope>provided</scope>
	</dependency>
  </dependencies>

    <profiles>

<!-- ######################################################################################################### 

InMemory

Profiles for the app which creates Mandelbrot only in memory (without creating any image files)

######################################################################################################### -->

        <!-- This is the profile for creating the Graal JVM mode version of the app.
             $ mvn clean package -PJAVA_inMemory
        -->
        <profile>
            <id>JAVA_inMemory</id>
            <build>
                <!-- Compiler -->
                <plugins>
                    <plugin>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.8.0</version>
                        <configuration>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                        </configuration>
                    </plugin>
                    <!-- Package -->
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>3.1.0</version>
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
                            <archive>
                                <manifest>
                                    <!-- Specify the main class -->
                                    <mainClass>${app.inMemory.main.class}</mainClass>
                                </manifest>
                            </archive>
                        </configuration>
                        <executions>
                            <execution>
                                <id>make-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Run the app, quick way of testing the Java version -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.2</version>
                        <configuration>
                            <executable>java</executable>
                            <arguments>
                                <argument>-classpath</argument>
                                <classpath />
                                <argument>${app.inMemory.main.class}</argument>
                            </arguments>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- This is the profile for generating the GraalVM native image.
             $ mvn clean package -PNATIVE_IMAGE_inMemory
        -->
        <profile>
            <id>NATIVE_IMAGE_inMemory</id>
            <build>
                <plugins>
                    <!-- Compiler -->
                    <plugin>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.8.0</version>
                        <configuration>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                        </configuration>
                    </plugin>
                    <!-- Package -->
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>3.1.0</version>
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
                            <archive>
                                <manifest>
                                    <!-- Specify the main class -->
                                    <mainClass>${app.inMemory.main.class}</mainClass>
                                </manifest>
                            </archive>
                        </configuration>
                        <executions>
                            <execution>
                                <id>make-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Native Image -->
                    <plugin>
                        <groupId>org.graalvm.buildtools</groupId>
                        <artifactId>native-maven-plugin</artifactId>
                        <version>${native.maven.plugin.version}</version>
                        <extensions>true</extensions>
                        <executions>
                        <execution>
                            <id>build-native</id>
                            <goals>
                            <goal>build</goal>
                            </goals>
                            <phase>package</phase>
                        </execution>
                        </executions>
                        <configuration>
                            <!-- Set this to true if you need to switch this off -->
                            <skip>false</skip>
                            <!-- The output name for the executable -->
                            <imageName>${exe.inMemory.file.name}</imageName>
                            <mainClass>${app.inMemory.main.class}</mainClass>
                            <buildArgs>
                                <!-- With Enterprise you can use the G1GC -->
                                <!--buildArg>- -gc=G1</buildArg-->
                                <buildArg>--no-fallback</buildArg>
                                <buildArg>--report-unsupported-elements-at-runtime</buildArg>
                            </buildArgs>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>


<!-- ######################################################################################################### 

PNG file

Profiles for the app which creates MandelbrotToPNG (creating a PNG file)
Note: Native-Image can be compiled but dies with a runtime error (as awt not available at runtime).
Excepted to be fixed with a newer GraalVM version, potentially with version 20.3.

######################################################################################################### -->

        <!-- This is the profile for creating the Graal JVM mode version of the app.
             $ mvn clean package -PJAVA_toPNG
        -->
        <profile>
            <id>JAVA_toPNG</id>
            <build>
                <!-- Compiler -->
                <plugins>
                    <plugin>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.8.0</version>
                        <configuration>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                        </configuration>
                    </plugin>
                    <!-- Package -->
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>3.1.0</version>
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
                            <archive>
                                <manifest>
                                    <!-- Specify the main class -->
                                    <mainClass>${app.toPNG.main.class}</mainClass>
                                </manifest>
                            </archive>
                        </configuration>
                        <executions>
                            <execution>
                                <id>make-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Run the app, quick way of testing the Java version -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.2</version>
                        <configuration>
                            <executable>java</executable>
                            <arguments>
                                <argument>-classpath</argument>
                                <classpath />
                                <argument>${app.toPNG.main.class}</argument>
                            </arguments>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- This is the profile for generating the Graal native image.
             $ mvn clean package -PNATIVE_IMAGE_toPNG
        -->
        <profile>
            <id>NATIVE_IMAGE_toPNG</id>
            <build>
                <plugins>
                    <!-- Compiler -->
                    <plugin>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.8.0</version>
                        <configuration>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                        </configuration>
                    </plugin>
                    <!-- Package -->
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>3.1.0</version>
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
							<archive>
                                <manifest>
                                    <!-- Specify the main class -->
                                    <mainClass>${app.toPNG.main.class}</mainClass>
                                </manifest>
                            </archive>
                        </configuration>
                        <executions>
                            <execution>
                                <id>make-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Need to exec Java with an agent once so that jni-config.json is created 
					     and can be then used for native-image build -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>3.0.0</version>
						<executions>
							<execution>
								<goals>
									<goal>exec</goal>
								</goals>
								<phase>package</phase>
							</execution>
						</executions>
						<configuration>
						    <executable>java</executable>
							<arguments>
								<argument>-agentlib:native-image-agent=config-output-dir=${project.build.directory}/META-INF/native-image</argument>
								<argument>-classpath</argument>
                                <classpath/>
   							    <argument>MandelbrotToPNGFile</argument>
							</arguments>
						</configuration>
					</plugin>
                    <!-- Native Image, now using the jni-config.json - needed because otherwise a runtime error is thrown as follows:
					  	 Exception in thread "main" java.lang.NoSuchFieldError: java.awt.image.ColorModel.pData
							at com.oracle.svm.jni.functions.JNIFunctions$Support.getFieldID(JNIFunctions.java:1125)
							at com.oracle.svm.jni.functions.JNIFunctions.GetFieldID(JNIFunctions.java:429)
							at java.awt.image.ColorModel.initIDs(ColorModel.java)
							at java.awt.image.ColorModel.<clinit>(ColorModel.java:220)
							at com.oracle.svm.core.classinitialization.ClassInitializationInfo.invokeClassInitializer(ClassInitializationInfo.java:375)
							at com.oracle.svm.core.classinitialization.ClassInitializationInfo.initialize(ClassInitializationInfo.java:295)
							at java.awt.image.BufferedImage.<clinit>(BufferedImage.java:287)
							at com.oracle.svm.core.classinitialization.ClassInitializationInfo.invokeClassInitializer(ClassInitializationInfo.java:375)
							at com.oracle.svm.core.classinitialization.ClassInitializationInfo.initialize(ClassInitializationInfo.java:295)
							at MandelbrotToPNGFile.createMandelbrotImage(MandelbrotToPNGFile.java:28)
							at MandelbrotToPNGFile.main(MandelbrotToPNGFile.java:24)
					-->
                    <plugin>
                        <groupId>org.graalvm.buildtools</groupId>
                        <artifactId>native-maven-plugin</artifactId>
                        <version>${native.maven.plugin.version}</version>
                        <extensions>true</extensions>
                        <executions>
                        <execution>
                            <id>build-native</id>
                            <goals>
                            <goal>build</goal>
                            </goals>
                            <phase>package</phase>
                        </execution>
                        </executions>
                        <configuration>
                            <!-- Set this to true if you need to switch this off -->
                            <skip>false</skip>
                            <!-- The output name for the executable -->
                            <imageName>${exe.toPNG.file.name}</imageName>
                            <!-- Set any parameters we need to pass to the native-image tool.
                                no-fallback : create a native image that doesn't fall back to the JVM
                            -->
                            <buildArgs>
                                <!-- With Enterprise you can use the G1GC -->
                                <!--buildArg>- -gc=G1</buildArg-->
                                <buildArg>--no-fallback</buildArg>
                                <buildArg>-H:+PrintAnalysisCallTree</buildArg>
                                <buildArg>-H:+ReportExceptionStackTraces</buildArg>
                                <buildArg>-H:JNIConfigurationFiles=${project.build.directory}/META-INF/native-image/jni-config.json</buildArg>
                                <buildArg>-H:+PrintJNIMethods</buildArg>
                                <buildArg>--report-unsupported-elements-at-runtime</buildArg>
                            </buildArgs>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>
</project>
